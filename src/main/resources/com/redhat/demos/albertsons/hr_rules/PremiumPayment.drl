package com.redhat.demos.albertsons.hr_rules;

import java.util.List;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.math.BigDecimal;
import java.math.RoundingMode;

import com.opengamma.strata.basics.date.HolidayCalendar;
import com.redhat.demos.albertsons.*;

// Holidays Calendar utility
global com.opengamma.strata.basics.date.HolidayCalendar holidaysCalendar;

rule "Premium Payment for Holidays"
   when
      $hdr: HireDateReference()
      $e:  Employee(  
         hireDate.toLocalDate() >= $hdr.startDate // hired on or after the satrt reference date (May 14th, 2018)
      )
      WorkSheet( employeeId == $e.id, $ws: worksheet )

      $holidays : List() 
                  from collect( WorkingHour( 
                                    dateTime.isAfter( $e.hireDate.plusMonths(6) ), // after the first 6 months
                                    holidaysCalendar.isHoliday( dateTime.toLocalDate() ) // is a holiday
                                 ) from $ws
                              )  

      // accumulate the working hours on holidays before the first 2080hs 
      $premium1: Double() from 
                           accumulate( $workingHoursAfter2080 : WorkingHour( dateTime.isBefore( $e.hireDate.plusMonths(6).plusHours(2080) ) ) from $holidays; 
                                       //$hoursAfter2080: count($workingHoursAfter2080)
                                       init   ( double sum = 0.0; ),
                                       action ( sum += 1.25; ),
                                       reverse( sum -= 1.25; ),
                                       result ( sum )                  
                           )

      // accumulate the working hours on holidays after the first 2080hs 
      $premium2: Double() from 
                           accumulate( $workingHoursAfter2080 : WorkingHour( dateTime.isAfter( $e.hireDate.plusMonths(6).plusHours(2080) ) ) from $holidays; 
                                       //$hoursAfter2080: count($workingHoursAfter2080)
                                       init   ( double sum = 0.0; ),
                                       action ( sum += 1.5; ),
                                       reverse( sum -= 1.5; ),
                                       result ( sum )                  
                           )
      
   then
      System.out.println("\nRule " + drools.getRule().getName() + " got fired!");
      System.out.println("\tHolidays: " + $holidays);
      System.out.println("\tPremium for holidays before 2080hs: " + $premium1);
      System.out.println("\tPremium for holidays after  2080hs: " + $premium2);

      PremiumPay premiumPay = new PremiumPay();
      premiumPay.setEmployeeId($e.getId());
      premiumPay.setPremiumType("Holiday");
      premiumPay.setPremiumAmount(
         $e.getRegularHourPayRate().multiply( BigDecimal.valueOf($premium1 + $premium2) ).setScale(2, RoundingMode.HALF_EVEN) 
      );

      System.out.println("\tPremium Pay: " + premiumPay);
      insert( premiumPay );
end

// rule "Premium Payment for Shift Days"
//    when
//       eval( true )
//    then
//       System.out.println("\nRule " + drools.getRule().getName() + " got fired! \n");
// end

// rule "Premium Payment for Sundays"
//    when
//       eval( true )
//    then
//       System.out.println("\nRule " + drools.getRule().getName() + " got fired! \n");
// end